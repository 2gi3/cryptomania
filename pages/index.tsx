// @ts-nocheck

import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.scss'
import React, { useEffect, useState } from 'react'
import { AppProps } from 'next/app'
import Buttons from '../components/Buttons/Buttons'
import GJNumbersView from '../components/GJNumbersView/GJNumbersView'

export const getServerSideProps = async () => {
  const bitstampRes = await fetch('https://www.bitstamp.net/api/v2/ticker/')
  const bitstampData = await bitstampRes.json()

  const finexRes = await fetch(
    'https://api-pub.bitfinex.com/v2/tickers?symbols=tBTCUSD' // response header missing access-control-allow-origin:*
  )
  const finexData = await finexRes.json()

  const coinbaseRes = await fetch(
    'https://api.coinbase.com/v2/exchange-rates?currency=BTC'
  )
  const coinbaseEntireData = await coinbaseRes.json()
  const coinbaseData = coinbaseEntireData.data

  const buttonsRes = await fetch(
    'https://www.bitstamp.net/api/v2/trading-pairs-info/'
  )
  const buttonsData = await buttonsRes.json()

  return {
    props: {
      bitstampData,
      coinbaseData,
      finexData,
      buttonsData,
    },
  }
}

export const Context = React.createContext('BTC/USD')

export default function Home({
  buttonsData,
  bitstampData,
  coinbaseData,
  finexData,
}) {
  const [selectedPair, setSelectedPair] = useState('BTC/USD')

  useEffect(() => {
    console.log(buttonsData)
    console.log(bitstampData)
    console.log(coinbaseData)
    console.log(finexData)
  }, [])
  return (
    <Context.Provider value={[selectedPair, setSelectedPair]}>
      <div className={styles.container}>
        <Head>
          <title>Cryptomaina</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <h1>WORK IN PROGRESS</h1>

        <main className={styles.main}>
          <section className={styles.averageTickerContainer}>
            <h1>Average ticker values</h1>
            {bitstampData.map((entry: any, index: number) =>
              index < 30 ? (
                <div key={`${entry.pair}-${index}`}>
                  <p>
                    The VWAP for {entry.pair} is : {entry.vwap}
                  </p>
                </div>
              ) : null
            )}
          </section>
          <section className={styles.tradingPairsContainer}>
            <div className={styles.tradingPairsButtons}>
              <Buttons pairs={buttonsData} />
            </div>
            <GJNumbersView data={bitstampData} />
          </section>
        </main>

        <footer className={styles.footer}>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{' '}
            <span className={styles.logo}>
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                width={72}
                height={16}
              />
            </span>
          </a>
        </footer>
      </div>
    </Context.Provider>
  )
}
